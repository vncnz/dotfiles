;; all icons are nf-md-...

(deflisten toggle_dashboard_with_rofi
    :initial "closed"
    "
    dbus-monitor \
        \"path='/org/freedesktop/Notifications',interface='com.github.ibonn.rofi',member='open'\" \
        \"path='/org/freedesktop/Notifications',interface='com.github.ibonn.rofi',member='close'\" |
        stdbuf -o0 awk \
            -F '; ' \
            -e '/interface=com.github.ibonn.rofi/ {print $NF}' |
        while read -r line; do ./widgets/toggle_dashboard_with_rofi.nu $line; done
    "
)

(include "./mywidgets/notifications.yuck")
(include "./mywidgets/music.yuck")

(defwindow sidebar
    :geometry (geometry
        :y "25px"
        :width "256px"
        :anchor "top right"
    )
    :monitor 0
    :namespace "eww_sidebar"
    :stacking "bottom"
    (box
        :class "sidebar"
        :orientation "vertical"
        (sidebar)
        (label
            :class "invisible"
            :text "${toggle_dashboard_with_rofi}"
        )
    )
)

(defwidget sidebar []
    (box
        :orientation "vertical"
        :spacing 32
        :space-evenly false
        (spotify)
        (notifications)
    )
)





















(defwidget _battery [battery status bempty bquarter bhalf bthreequarters bfull charge]
  (box :class "bat-box" :space-evenly false :spacing 8
    (label :text {status == '' ? '' : status == 'Charging' ? charge :
      battery < 15 ? bempty :
        battery < 35 ? bquarter :
          battery < 65 ? bhalf :
            battery < 85 ? bthreequarters : bfull}
    )
  )
)


;; all icons are nf-md-...

(include "./mywidgets/audio.yuck")
(include "./widgets2/clock.yuck")
(include "./widgets2/clipboard.yuck")
(include "./widgets2/group_lock.yuck")
;; (include "./widgets2/network.yuck")
(include "./widgets2/screenshot.yuck")
(include "./widgets2/recorder.yuck")
(include "./widgets2/workspaces.yuck")

(defpoll net :interval "100s"
  :initial `N/A`
  `nmcli -t -f SIGNAL,ACTIVE device wifi \
    | awk -F':' '{if($2=="yes")print$1}'`)
(defpoll wired :interval "1000s" `nmcli device status | grep connected | grep -c Wired`)

(defwidget _network [strength offline excellent
                    good okay slow]
  (box :class "net-box"
       :space-evenly false
       :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent})))

(defwindow statusbar [stacking]
    :geometry (geometry
        :height "100%"
        :anchor "center left"
    )
    :monitor 0
    :exclusive true
    :stacking { stacking }
    :namespace "eww_statusbar"
    (statusbar)
)

(defwidget statusbar []
    (box
        :orientation "vertical"
        :valign "end"
        :halig "center"
        :class "bar"
        ;; (workspaces)
        ;; (mininotifications)
        (box
            :orientation "horizontal"
            :valign "end"
            :space-evenly false
            (box
                :width 12
            )
            (box
                :orientation "vertical"
                :class "bottom"
                :halign "center"
                :width 50
                :space-evenly false
                :spacing 25
                (button :onclick "eww open --toggle powermenu" :class "open-btn" "")
                (audio)
                (box :valign "center" :halign "center" :orientation "vertical"
                  ;; (_network :strength net :offline "" :excellent "" :good "" :okay "" :slow "")
                  (label :class "nerd-icon" :text "${net == "" ? (wired == 1 ? "" : "") : ""}")
                  (label :class "${wired == 1 ? true : false}" :text "${net}%")
                )
                (box :valign "center" :halign "center" :orientation "vertical"
                  (_battery :status {EWW_BATTERY.BAT0.status}
                      :battery {EWW_BATTERY.BAT0.capacity}
                      :charge "" :bempty "" :bquarter "" :bhalf "" :bthreequarters "" :bfull "")
                  (label :text "${EWW_BATTERY.BAT0.capacity}%")
                )
                (box :valign "center" :halign "center" :orientation "horizontal" (clock))
                (box :height 12)
            )
        )
    )
)


























(defwindow powermenu
  :monitor 0 ;; wayland users may need this
  :stacking "fg"
  :wm-ignore true
  :geometry (geometry :width "97%" :height "100%")
  (powermenu_layout))

(defwidget metric [label value onchange]
  (box :orientation "h"
       :class "metric"
       :space-evenly false
    (box :class "label" label)
    (scale :min 0
           :max 101
           :active {onchange != ""}
           :value value
           :onchange onchange)))

(defwidget powermenu_layout []
  (box :class "layout-box" :space-evenly false :orientation "vertical"
       :style "background-image: url('/home/vncnz/Pictures/wallpaper3.jpg')"
    (box :valign "start" :space-evenly true :hexpand true :spacing 25
        (box :space-evenly false :class "overlay-btns" :spacing 25 :vexpand false :hexpand false :valign "center" :halign "start"
          (box :valign "center" :halign "center" :orientation "vertical" :spacing 15
                (metric :label ""
                        :value {EWW_RAM.used_mem_perc}
                        :onchange "")
                (metric :label ""
                        :value {round((1 - (EWW_DISK["/"].free / EWW_DISK["/"].total)) * 100, 0)}
                        :onchange "")
                (metric :label ""
                        :value {EWW_BATTERY.BAT0.capacity}
                        :onchange "")
                (metric :label "${net == "" ? (wired == 1 ? "" : "") : ""}"
                        :value {wired == 1 ? 100 : net}
                        :onchange "")
                (metric :label {volumeicon}
                        :value volumevalue
                        :onchange "amixer -D pulse sset Master {}%")
          )
        )
        (box :class "overlay-btns" :valign "start" :halign "end"
          (button :onclick "eww close powermenu" :class "close-btn" "")
        )
    )
    (box :space-evenly false :hexpand true :vexpand true
      (box :spacing 15 :class "tm-box" :space-evenly false
            :valign "end" :halign "start"
        (_sundial)
        (label :text "")
        (label :text "${time.hour}:${time.min}")
        (label :text "")
        (label :text "${time.year}-${time.month}-${time.day}"))
      (_buttons :shutdown "poweroff" :reboot "reboot"
                :logout "loginctl kill-session self"
                :shutdown_icon "" :reboot_icon ""
                :logout_icon ""))))

(defwidget _network [strength offline excellent
                    good okay slow]
  (box :class "net-box"
       :space-evenly false
       :spacing 8
    (label :text {strength == "" ? offline :
      strength < 26 ? slow :
        strength < 51 ? okay :
          strength < 76 ? good : excellent})))

(defwidget _buttons [shutdown shutdown_icon reboot
                    reboot_icon logout logout_icon]
  (box :class "btns-box" :spacing 5
       :vexpand true :hexpand true
       :valign "end" :halign "end"
       :space-evenly false
    (button :onclick shutdown shutdown_icon)
    (button :onclick reboot reboot_icon)
    (button :onclick logout logout_icon)))

(defwidget _sundial []
  (label :class "sundial-lbl" :halign "end" :hexpand true
         :text {time.hour >= 2 && time.hour <= 4 ? "Early Morning" :
               time.hour <= 5 ? "Dawn" :
               time.hour >= 6
                && (time.hour <= 8 && time.min <= 59)
                  ? "Morning" :
               time.hour >= 9
                 && (time.hour <= 11 && time.min <= 59)
                   ? "Late Morning" :
               time.hour == 12 && time.min <= 29
                 ? "Midday" :
               time.hour >= 12 && time.hour <= 16
                 ? "Afternoon" :
               time.hour > 16 && time.hour <= 17
                 ? "Late Afternoon" :
               (time.hour >= 17 && time.min <= 1)
                 || (time.hour <= 18 && time.min <= 20)
                   ? "Early Evening" :
               time.hour >= 18 && time.hour <= 19
                 ? "Dusk" :
               time.hour > 19 && time.hour <= 21
                 ? "Late Evening" :
               time.hour > 21 ? "Night" : "Midnight"}))
